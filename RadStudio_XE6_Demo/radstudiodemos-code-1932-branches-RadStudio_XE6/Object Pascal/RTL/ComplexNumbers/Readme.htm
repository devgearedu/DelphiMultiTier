<!-- saved from url=(0022)http://internet.e-mail -->
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">

<html>
  <head>
	<title></title>
  </head>

  <body>
	<table cellspacing="1" cellpadding="1" width="500" bgcolor="#e0ffff" border="1">
		<tr>
		  <td style="WIDTH: 149px" bgcolor="#fffaf0">Demo Name
</td>
		  <td bgcolor="#e6e6fa"><strong>ComplexNumbers</strong>
</td>
		</tr>
		<tr>
		  <td style="WIDTH: 149px" bgcolor="#fffaf0">Features demonstrated
</td>
		  <td bgcolor="#e6e6fa">
			<p><strong>operator overloading for records, for example: class operator Add(const Left, Right: TComplex): TComplex;  </strong>
</p>
			<p><strong>different visibility specifiers in records (such as strict private, private and public)</strong>
</p>
			<p><strong>instance methods for records, for example:  function Modulus: Double;</strong>
</p>
			<p><strong>class methods for records, for example: class function From(const AReal, AImaginary: Double): TComplex; static;</strong>
</p>
			<p><strong>class vars for records, for example: class var Symbol: string;</strong>
</p>
			<p><strong>simulating a class constructor for records, by using a private class procedure and the initialization section of the unit</strong>
</p></td>
		</tr>
		<tr>
		  <td style="WIDTH: 149px" bgcolor="#fffaf0">Description
</td>
		  <td bgcolor="#e6e6fa">
            <strong>This example demonstrates the new operator overloading of record types supported by the Win32 compiler (DCC32).

<p>It includes a unit named Vassbotn.Vcl.Complex that is a direct port of the corresponding .NET unit called CodeGear.Vcl.Complex. </p> <p>The code can be used as-is if you need a native and relatively fast TComplex implementation (compared with the Variant-based implementation provided in the VarCmplx unit.</p>
</strong>
</td>
        </tr>
    </table>

  </body>
</html>
